
import java.util.ArrayList;
import java.util.Collections;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 * what I have to do: set up advance year button: -growth methods for each child
 * class -;static method to growAll? -input bar for classes necessary - if
 * statements in buybtn method make sure you can't buy something you own, or
 * sell something you don't display menus for each child class labels for
 * totals(assets, values, growth since start, age...)
 *
 * @author luke2720
 */
public class InvestmentSimulator extends javax.swing.JFrame {

    /**
     * Creates new form InvestmentSimulator
     */
    //function variables:
    DefaultListModel model = new DefaultListModel();
    ArrayList<Investment> invs;
    ArrayList<Investment> owned;
    boolean buyOn;

    //user variables:
    int cash, assets;

    public InvestmentSimulator() {
        initComponents();
        cash = 50000;
        assets=0;
        mnylbl.setText("Cash: "+cash);
        asslbl.setText("Assets: "+assets);
        buyOn = true;
        btnrep.setVisible(false);//can only repair when viewing repairable assets
        sellbtn.setEnabled(false);//start is on buy all menu, so cant sell
        invs = new ArrayList();
        owned = new ArrayList();
        //invs.add(new Property(50000, 80, "Ranchy Ranch"));//fill arrays
        //invs.add(new Property(1200000, 90, "Mansion"));
       // invs.add(new Property(1000, 25, "Beater"));
        //invs.add(new Stock(200, 2, 50, "Apple"));
        //invs.add(new Stock(300, 3, 60, "Nike"));
        //invs.add(new Stock(150, 4, 20, "Amazon"));
       // invs.add(new Vehicle(2000, 43, "1998 Honda Civic"));
        //invs.add(new Vehicle(40000, 100, "2020 Honda Accord"));
        //invs.add(new Vehicle(150000, 92, "2019 Mercedes-Benz G Wagon"));
        //invs.add(new Artifact(600, "Donald Trump's Wig", 4));
        //invs.add(new Artifact(30000, "Dinosaur Bone", 3));
        //invs.add(new Artifact(10000, "Strand of Luke Chennette's Hair", 5));
        invs.add(new Ownership(10000000, "Innovative Technology, Inc", 3, 4, 5));
        invs.add(new Ownership(300000000, "El Chapo Flour Products LTD", 1, 4, 3));
        invs.add(new Ownership(95000, "Grandma's Bookstore", 5, 3, 4));
        //still have to add lottery

        list.setModel(model);
        listlbl.setText("Available Investments");
        sort();

        for (Investment inv : invs) {

            model.addElement(inv.getName());
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnadvance = new javax.swing.JButton();
        buybutton = new javax.swing.JButton();
        sellbtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        list = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        text = new javax.swing.JTextArea();
        listlbl = new javax.swing.JLabel();
        btnrep = new javax.swing.JButton();
        mnylbl = new javax.swing.JLabel();
        asslbl = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        buy = new javax.swing.JMenu();
        buyall = new javax.swing.JMenuItem();
        buyprops = new javax.swing.JMenuItem();
        buystocks = new javax.swing.JMenuItem();
        buyvehc = new javax.swing.JMenuItem();
        buyart = new javax.swing.JMenuItem();
        buylott = new javax.swing.JMenuItem();
        buycomp = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        sellall = new javax.swing.JMenuItem();
        sellprops = new javax.swing.JMenuItem();
        sellstocks = new javax.swing.JMenuItem();
        sellvehc = new javax.swing.JMenuItem();
        sellart = new javax.swing.JMenuItem();
        selllott = new javax.swing.JMenuItem();
        sellowne = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        mngall = new javax.swing.JMenuItem();
        mngprops = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        mngvehc = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnadvance.setText("Advance Year");
        btnadvance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnadvanceActionPerformed(evt);
            }
        });

        buybutton.setText("Buy");
        buybutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buybuttonActionPerformed(evt);
            }
        });

        sellbtn.setText("Sell");
        sellbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sellbtnActionPerformed(evt);
            }
        });

        list.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        list.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(list);

        text.setColumns(20);
        text.setRows(5);
        jScrollPane3.setViewportView(text);

        listlbl.setText("List");

        btnrep.setText("Repair");
        btnrep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnrepActionPerformed(evt);
            }
        });

        mnylbl.setText("Cash: $");

        asslbl.setText("Assets: $");

        buy.setText("Buy");

        buyall.setText("All");
        buyall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyallActionPerformed(evt);
            }
        });
        buy.add(buyall);

        buyprops.setText("Properties");
        buyprops.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buypropsActionPerformed(evt);
            }
        });
        buy.add(buyprops);

        buystocks.setText("Stocks");
        buystocks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buystocksActionPerformed(evt);
            }
        });
        buy.add(buystocks);

        buyvehc.setText("Vehicles");
        buyvehc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyvehcActionPerformed(evt);
            }
        });
        buy.add(buyvehc);

        buyart.setText("Artifacts");
        buyart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyartActionPerformed(evt);
            }
        });
        buy.add(buyart);

        buylott.setText("Lottery");
        buylott.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buylottActionPerformed(evt);
            }
        });
        buy.add(buylott);

        buycomp.setText("Companies");
        buycomp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buycompActionPerformed(evt);
            }
        });
        buy.add(buycomp);

        jMenuBar1.add(buy);

        jMenu2.setText("Sell");

        sellall.setText("All");
        sellall.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sellallActionPerformed(evt);
            }
        });
        jMenu2.add(sellall);

        sellprops.setText("Properties");
        sellprops.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sellpropsActionPerformed(evt);
            }
        });
        jMenu2.add(sellprops);

        sellstocks.setText("Stocks");
        sellstocks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sellstocksActionPerformed(evt);
            }
        });
        jMenu2.add(sellstocks);

        sellvehc.setText("Vehicles");
        sellvehc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sellvehcActionPerformed(evt);
            }
        });
        jMenu2.add(sellvehc);

        sellart.setText("Artifacts");
        sellart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sellartActionPerformed(evt);
            }
        });
        jMenu2.add(sellart);

        selllott.setText("Lottery");
        selllott.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selllottActionPerformed(evt);
            }
        });
        jMenu2.add(selllott);

        sellowne.setText("Companies");
        sellowne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sellowneActionPerformed(evt);
            }
        });
        jMenu2.add(sellowne);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("Manage");

        mngall.setText("All");
        jMenu3.add(mngall);

        mngprops.setText("Properties");
        mngprops.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mngpropsActionPerformed(evt);
            }
        });
        jMenu3.add(mngprops);

        jMenuItem4.setText("Stocks");
        jMenu3.add(jMenuItem4);

        mngvehc.setText("Vehicles");
        mngvehc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mngvehcActionPerformed(evt);
            }
        });
        jMenu3.add(mngvehc);

        jMenuItem5.setText("Companies");
        jMenu3.add(jMenuItem5);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(asslbl, javax.swing.GroupLayout.DEFAULT_SIZE, 101, Short.MAX_VALUE)
                    .addComponent(mnylbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(buybutton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 59, Short.MAX_VALUE)
                        .addComponent(sellbtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 59, Short.MAX_VALUE))
                    .addComponent(btnrep, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(listlbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(btnadvance)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(btnadvance)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 78, Short.MAX_VALUE)
                .addComponent(buybutton)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(sellbtn)
                        .addGap(38, 38, 38)
                        .addComponent(btnrep))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addComponent(mnylbl, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(asslbl, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(104, 104, 104))
            .addGroup(layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addComponent(listlbl, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 264, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void changeMoney(int m) {
        cash += m;
        mnylbl.setText("Cash: $" + cash);
        assets -= m;
        asslbl.setText("Assets: $" + assets);
    }

    private void buyallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyallActionPerformed
        // TODO add your handling code here:
        buybutton.setEnabled(true);
        sellbtn.setEnabled(false);
        btnrep.setVisible(false);
        buyOn = true;
        listlbl.setText("Available Investments");
        model.clear();
        for (Investment inv : invs) {
            model.addElement(inv.getName());
        }
    }//GEN-LAST:event_buyallActionPerformed

    private void sort() {
        Collections.sort(invs);
        Collections.sort(owned);
    }

    private void listMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listMouseClicked
        sort();//always sort before searching
        if (buyOn) {
            int loc = search(invs, (Investment) (new Stock(0, 0, 0, list.getSelectedValue())));//make boolean for list
            text.setText(invs.get(loc).toString());
        } else {
            int loc = search(owned, (Investment) (new Stock(0, 0, 0, list.getSelectedValue())));//make boolean for list
            text.setText(owned.get(loc).toString());
        }


    }//GEN-LAST:event_listMouseClicked

    private void buybuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buybuttonActionPerformed
        // TODO add your handling code here:
        if (!list.isSelectionEmpty()) {//have to have an item selected
            int loc = search(invs, (Investment) (new Stock(0, 0, 0, list.getSelectedValue())));//find item's position in arraylist to use for searching, use stock as placeholder and compare based on name
            
            if (invs.get(loc) instanceof Ownership) {
                int per = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter percentage stake of " + invs.get(loc).getName() + " you would like to make an offer on.", 0));
                int offer=Integer.parseInt(JOptionPane.showInputDialog(this, "Enter amount you would like to offer for " + per + "% "
                        + "of " + invs.get(loc).getName() + "\n(Estimated Value: $" + ((Ownership) invs.get(loc)).perValue(per) + ")", 0));
                while(true){ offer = Integer.parseInt(JOptionPane.showInputDialog(this, "Insufficient funds. Enter new amount you would like to offer for " + per + "% "
                        + "of " + invs.get(loc).getName() + "\n(Estimated Value: $" + ((Ownership) invs.get(loc)).perValue(per) + ")", 0));
                if(offer<=cash)break;}
                if (((Ownership) invs.get(loc)).acceptsOffer(per, offer)) {//if company accepts
                    text.setText(per + "% of " + invs.get(loc).getName() + " purchased for $" + offer);
                    changeMoney(-offer);//negative so method will subtract money spent 
                    owned.add(invs.get(loc));//add to owned
                    invs.remove(loc);//remove from invs array 
                    model.remove(list.getSelectedIndex());
                } else {
                    text.setText("Your offer has been rejected.");
                }

            } else if (invs.get(loc) instanceof Property) {    
                if(cash>=invs.get(loc).getValue()){
                ((Property) invs.get(loc)).setMg(JOptionPane.showInputDialog(this, "Enter \"y\" if you would like to hire management to repair property at a cost of $2000 per year.", 0).equals("y"));//set management boolean
                owned.add(invs.get(list.getSelectedIndex()));//add to owned
                text.setText((invs.get(loc)).getName() + " purchased for $" + (invs.get(loc).getValue()));
                changeMoney(-invs.get(loc).getValue());//negative so method subtracts money spent
                invs.remove(loc);//remove from invs array
                model.remove(list.getSelectedIndex());
            }
                else text.setText("Insufficient funds to purchase "+invs.get(loc).getName());}
            else if (invs.get(loc) instanceof Lottery) {
                int t = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter amount of tickets you would like to purchase.", 0));
                if (((Lottery) invs.get(loc)).setTickets(t)&&cash>=(t*5)) {
                    text.setText(t + " lottery tickets purchased for " + t * 5 + ".");//price per ticket is $5
                    changeMoney(-t*5);
                    owned.add(invs.get(loc));//add to owned
                invs.remove(loc);//remove from invs array 
                model.remove(list.getSelectedIndex());
                } else {
                    text.setText("Invalid amount of tickets to purchase or insufficient funds.");
                }

            } else if (invs.get(loc) instanceof Stock) {
                int q = Integer.parseInt((JOptionPane.showInputDialog(this, "Enter quantity of " + invs.get(loc).getName() + " stocks you would like to purchase."
                        + "\nPrice per stock: $" + invs.get(loc).getValue(), 0)));
                while(q*invs.get(loc).getValue()<=cash&&q>=0){//have enough cash to afford and quantity above 0
                    q = Integer.parseInt((JOptionPane.showInputDialog(this, "Insufficient funds or invalid number. Enter quantity of " + invs.get(loc).getName() + " stocks you would like to purchase."
                        + "\nPrice per stock: $" + invs.get(loc).getValue(), 0)));
                }
                ((Stock) invs.get(loc)).setQuantity(q);
                text.setText(q + " stocks of " + invs.get(loc).getName() + " purchased for $" + invs.get(loc).getValue() * q + "."); //calculate price: value*amount
                changeMoney(-invs.get(loc).getValue()*q);//same as line above to calculate price, negative because spending
                int loc2 = search(owned, (Investment) (new Stock(0, 0, 0, list.getSelectedValue())));//search owned to check if it is already owned, if not search will return -1
                if(loc2==-1)owned.add(invs.get(loc));//add to owned
                else ((Stock)owned.get(loc2)).setQuantity(q + ((Stock)owned.get(loc2)).getQuantity());//add new quantity to old one
                
            } else {
                if(invs.get(loc).getValue()<=cash){//can purchase
                owned.add(invs.get(loc));//add to owned
                text.setText((invs.get(loc)).getName() + " purchased for $" + (invs.get(loc)).getValue());
                invs.remove(loc);//remove from invs array 
                model.remove(list.getSelectedIndex());
                changeMoney(-invs.get(loc).getValue());
            }
                else text.setText("Insufficient funds.");
               
            }

        }
    }//GEN-LAST:event_buybuttonActionPerformed

    public static int search(ArrayList a, Object searchValue) {

        int left = 0;
        int right = a.size() - 1;
        while (left <= right) {
            int midpoint = (left + right) / 2;
            int result = ((Comparable) a.get(midpoint)).compareTo(searchValue);
            if (result == 0) {
                return midpoint;
            } else if (result < 0) {
                left = midpoint + 1;
            } else {
                right = midpoint - 1;
            }
        }
        return -1;
    }


    private void sellbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sellbtnActionPerformed
        // TODO add your handling code here:
        //find way to find selection in table, otherwise will have to use list
        if (!list.isSelectionEmpty()) {
            int loc = search(owned, (Investment) (new Stock(0, 0, 0, list.getSelectedValue())));//find item's position in arraylist to use for searching

            if (owned.get(loc) instanceof Stock) {
                int sellv = Integer.parseInt(JOptionPane.showInputDialog(this, "Enter amount of " + owned.get(loc).getName() + " stocks you would like to sell at $" + owned.get(loc).getValue() + " each.", 0));
                while (sellv >= 0 && sellv <= ((Stock) owned.get(loc)).getQuantity()) {//validate number (cant sell more than owned or <0)
                    sellv = Integer.parseInt(JOptionPane.showInputDialog(this, "Invalid input. "
                            + "\nEnter amount of " + owned.get(loc).getName() + " stocks you would like to sell at $" + owned.get(loc).getValue() + " each.", 0));
                }
                if (sellv == ((Stock) owned.get(loc)).getQuantity()) {//if selling all stocks
                    invs.add(owned.get(loc));
                    owned.remove(loc);
                } else {
                    ((Stock) owned.get(loc)).setQuantity(((Stock) owned.get(loc)).getQuantity() - sellv);//set quantity, to quantity minus sell value
                }
                changeMoney(sellv * owned.get(loc).getValue());//calculate price of stocks sold
            } else {

                invs.add(owned.get(loc));
                text.setText((owned.get(loc)).getName() + " sold for $" + (owned.get(list.getSelectedIndex())).getValue());
                owned.remove(loc);
                model.remove(loc);
                if (owned.get(loc) instanceof Ownership) {
                    changeMoney(((Ownership) owned.get(loc)).perValue(((Ownership) owned.get(loc)).getStake()));

                } else {
                    changeMoney(owned.get(loc).getValue());
                }
            }

        }

    }//GEN-LAST:event_sellbtnActionPerformed

    private void sellallActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sellallActionPerformed
        // TODO add your handling code here:
        buybutton.setEnabled(false);
        sellbtn.setEnabled(true);
        btnrep.setVisible(false);
        buyOn = false;
        model.clear();
        listlbl.setText("Owned Assets");
        for (Investment inv : owned) {
            model.addElement(inv.getName());
        }
    }//GEN-LAST:event_sellallActionPerformed

    private void sellvehcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sellvehcActionPerformed
        // TODO add your handling code here:
        buybutton.setEnabled(false);
        sellbtn.setEnabled(true);
        btnrep.setVisible(false);
        model.clear();
        for (Investment inv : owned) {
            if (inv instanceof Vehicle) {
                model.addElement(inv.getName());
            }
        }
    }//GEN-LAST:event_sellvehcActionPerformed

    private void buypropsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buypropsActionPerformed
        // TODO add your handling code here:
        buybutton.setEnabled(true);
        sellbtn.setEnabled(false);
        btnrep.setVisible(false);
        buyOn = false;
        model.clear();
        for (Investment inv : invs) {
            if (inv instanceof Property) {
                model.addElement(inv.getName());
            }
        }
    }//GEN-LAST:event_buypropsActionPerformed

    private void buystocksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buystocksActionPerformed
        // TODO add your handling code here:
        buybutton.setEnabled(true);
        sellbtn.setEnabled(false);
        btnrep.setVisible(false);
        buyOn = true;
        model.clear();
        for (Investment inv : invs) {
            if (inv instanceof Stock) {
                model.addElement(inv.getName());
            }
        }
    }//GEN-LAST:event_buystocksActionPerformed

    private void buyvehcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyvehcActionPerformed
        // TODO add your handling code here:
        buybutton.setEnabled(true);
        sellbtn.setEnabled(false);
        btnrep.setVisible(false);
        buyOn = true;
        model.clear();
        for (Investment inv : invs) {
            if (inv instanceof Vehicle) {
                model.addElement(inv.getName());
            }
        }
    }//GEN-LAST:event_buyvehcActionPerformed

    private void buyartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyartActionPerformed
        // TODO add your handling code here:
        buybutton.setEnabled(true);
        sellbtn.setEnabled(false);
        btnrep.setVisible(false);
        buyOn = true;
        model.clear();
        for (Investment inv : invs) {
            if (inv instanceof Artifact) {
                model.addElement(inv.getName());
            }
        }
    }//GEN-LAST:event_buyartActionPerformed

    private void buycompActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buycompActionPerformed
        // TODO add your handling code here:
        buybutton.setEnabled(true);
        sellbtn.setEnabled(false);
        btnrep.setVisible(false);
        buyOn = true;
        model.clear();
        for (Investment inv : invs) {
            if (inv instanceof Ownership) {
                model.addElement(inv.getName());
            }
        }
    }//GEN-LAST:event_buycompActionPerformed

    private void sellpropsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sellpropsActionPerformed
        // TODO add your handling code here:
        buybutton.setEnabled(false);
        sellbtn.setEnabled(true);
        btnrep.setVisible(false);
        buyOn = false;
        model.clear();
        for (Investment inv : owned) {
            if (inv instanceof Property) {
                model.addElement(inv.getName());
            }
        }
    }//GEN-LAST:event_sellpropsActionPerformed

    private void sellstocksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sellstocksActionPerformed
        // TODO add your handling code here:
        buybutton.setEnabled(false);
        sellbtn.setEnabled(true);
        btnrep.setVisible(false);
        buyOn = false;
        model.clear();
        for (Investment inv : owned) {
            if (inv instanceof Stock) {
                model.addElement(inv.getName());
            }
        }
    }//GEN-LAST:event_sellstocksActionPerformed

    private void sellartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sellartActionPerformed
        // TODO add your handling code here:
        buybutton.setEnabled(false);
        sellbtn.setEnabled(true);
        btnrep.setVisible(false);
        buyOn = false;
        model.clear();
        for (Investment inv : owned) {
            if (inv instanceof Artifact) {
                model.addElement(inv.getName());
            }
        }
    }//GEN-LAST:event_sellartActionPerformed

    private void sellowneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sellowneActionPerformed
        // TODO add your handling code here:
        buybutton.setEnabled(false);
        sellbtn.setEnabled(true);
        btnrep.setVisible(false);
        buyOn = false;
        model.clear();
        for (Investment inv : owned) {
            if (inv instanceof Ownership) {
                model.addElement(inv.getName());
            }
        }
    }//GEN-LAST:event_sellowneActionPerformed

    private void buylottActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buylottActionPerformed
        // TODO add your handling code here:
        buybutton.setEnabled(true);
        sellbtn.setEnabled(false);
        btnrep.setVisible(false);
        buyOn = true;
        buybutton.setEnabled(false);
        sellbtn.setEnabled(true);
        buyOn = false;
        model.clear();
        for (Investment inv : invs) {
            if (inv instanceof Lottery) {
                model.addElement(inv.getName());
            }
        }
    }//GEN-LAST:event_buylottActionPerformed

    private void selllottActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selllottActionPerformed
        // TODO add your handling code here:
        buybutton.setEnabled(false);
        sellbtn.setEnabled(true);
        btnrep.setVisible(false);
        buyOn = false;
        model.clear();
        for (Investment inv : owned) {
            if (inv instanceof Lottery) {
                model.addElement(inv.getName());
            }
        }
    }//GEN-LAST:event_selllottActionPerformed

    private void mngpropsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mngpropsActionPerformed
        // TODO add your handling code here:
        buybutton.setEnabled(false);
        sellbtn.setEnabled(false);
        btnrep.setVisible(true);

        buyOn = false;
        model.clear();
        for (Investment inv : owned) {
            if (inv instanceof Property) {
                model.addElement(inv.getName());
            }
        }
    }//GEN-LAST:event_mngpropsActionPerformed

    private void mngvehcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mngvehcActionPerformed
        // TODO add your handling code here:
        buybutton.setEnabled(false);
        sellbtn.setEnabled(false);
        btnrep.setVisible(true);
        
        buyOn = false;
        model.clear();
        for (Investment inv : owned) {
            if (inv instanceof Vehicle) {
                model.addElement(inv.getName());
            }
        }
    }//GEN-LAST:event_mngvehcActionPerformed

    private void btnrepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnrepActionPerformed
        // TODO add your handling code here:
        if (!list.isSelectionEmpty()) {//have to have an item selected
            int loc = search(owned, (Investment) (new Stock(0, 0, 0, list.getSelectedValue())));//find item's position in arraylist to use for searching
            if (owned.get(loc) instanceof Property) {
                ((Property) owned.get(loc)).repair();
            } else if (owned.get(loc) instanceof Vehicle) {
                ((Vehicle) owned.get(loc)).repair();
            }
            changeMoney(-2000);
        }
    }//GEN-LAST:event_btnrepActionPerformed

    private void btnadvanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnadvanceActionPerformed
        // TODO add your handling code here:
        Investment.passYear(owned);
        //calculate new value of assets
        
        assets=0;
        for (Investment inv : invs) {
            if (inv instanceof Lottery){
                assets+=inv.getValue();//will be jackpot if win, 0 if not
                invs.remove(inv); //cant own lottery tickets longer than  a year
            }
            else if(inv instanceof Stock){
                assets+= inv.getValue()*((Stock)inv).getQuantity();//multiply value by amount
            }
            else assets+= inv.getValue();
            
        }
        
    }//GEN-LAST:event_btnadvanceActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InvestmentSimulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InvestmentSimulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InvestmentSimulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InvestmentSimulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InvestmentSimulator().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel asslbl;
    private javax.swing.JButton btnadvance;
    private javax.swing.JButton btnrep;
    private javax.swing.JMenu buy;
    private javax.swing.JMenuItem buyall;
    private javax.swing.JMenuItem buyart;
    private javax.swing.JButton buybutton;
    private javax.swing.JMenuItem buycomp;
    private javax.swing.JMenuItem buylott;
    private javax.swing.JMenuItem buyprops;
    private javax.swing.JMenuItem buystocks;
    private javax.swing.JMenuItem buyvehc;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList<String> list;
    private javax.swing.JLabel listlbl;
    private javax.swing.JMenuItem mngall;
    private javax.swing.JMenuItem mngprops;
    private javax.swing.JMenuItem mngvehc;
    private javax.swing.JLabel mnylbl;
    private javax.swing.JMenuItem sellall;
    private javax.swing.JMenuItem sellart;
    private javax.swing.JButton sellbtn;
    private javax.swing.JMenuItem selllott;
    private javax.swing.JMenuItem sellowne;
    private javax.swing.JMenuItem sellprops;
    private javax.swing.JMenuItem sellstocks;
    private javax.swing.JMenuItem sellvehc;
    private javax.swing.JTextArea text;
    // End of variables declaration//GEN-END:variables
}
